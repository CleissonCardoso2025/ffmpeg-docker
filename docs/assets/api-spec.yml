openapi: 3.0.0
info:
  title: FFmpeg Docker API
  version: 0.1.0
  description: Common FFmpeg functions from a RESTful API
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  contact:
    name: Ryan McCartney
    url: https://ryan.mccartney.info/ffmpeg-docker
    email: ryan@mccartney.info
servers:
  - url: http://localhost:80/api/
paths:
  /audio/decklink:
    post:
      description: Takes an audio file as an input and outputs it to a decklink card.
      tags:
        - audio
      parameters:
        - in: formData
          name: file
          type: string
          description: Filename and extension of media to playout. E.g - test.mp4
          required: true
        - in: formData
          name: cardName
          type: string
          description: The name of the BMD Decklink cards. E.g - "DeckLink SDI"
          required: true
        - in: formData
          name: font
          type: string
          description: The name of the font audio to use for text overlay. Must use the
            TrueType fonts. E.g - "swansea-bold.ttf"
          required: font
        - in: formData
          name: offset
          type: number
          description: Offset for time in hours. E.g 3, -3
          required: false
        - in: formData
          name: timecode
          type: boolean
          description: Show the timecode line - true,false
          required: false
        - in: formData
          name: repeat
          type: boolean
          description: Decides whether the media loops or not
          required: false
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /audio/srt:
    post:
      description: SRT encode an audio file.
      tags:
        - audio
      parameters:
        - in: formData
          name: file
          type: string
          description: Filename and extension of media to playout. E.g - test.mp4.
            Relative to ./data/media/
          required: true
        - in: formData
          name: address
          type: string
          description: Address to direct stream towards
          required: true
        - in: formData
          name: port
          type: number
          description: Port to direct stream towards
          required: true
        - in: formData
          name: latency
          type: number
          description: SRT latency in milliseconds, default is 250ms
          required: false
        - in: formData
          name: bitrate
          type: number
          description: The bitrate of the encoded stream in kilobits per second
          required: true
        - in: formData
          name: font
          type: string
          description: The name of the font audio to use for text overlay. Must use the
            TrueType fonts. E.g - "swansea-bold.ttf"
          required: false
        - in: formData
          name: offset
          type: number
          description: Offset for time in hours. E.g 3, -3
          required: false
        - in: formData
          name: timecode
          type: boolean
          description: Show the timecode line - true,false
          required: false
        - in: formData
          name: repeat
          type: boolean
          description: Decides whether the media loops or not
          required: false
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /audio/udp:
    post:
      description: UDP encode an audio file.
      tags:
        - audio
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /audio/rtp:
    post:
      description: RTP encode an audio file.
      tags:
        - audio
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /audio/rtmp:
    post:
      description: RTMP encode an audio file.
      tags:
        - audio
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /audio/hls:
    post:
      description: HLS encode an audio file.
      tags:
        - audio
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /audio/metadata:
    get:
      description: Get the metadata in a median audio file.
      tags:
        - audios
      produces:
        - application/json
      parameters:
        - in: formData
          name: file
          type: string
          description: The file including extension in the `./data/media` directory
          required: false
      responses:
        "200":
          description: Success
  /audio/list:
    get:
      description: Gets a list of audio files in the "./data/media" folder.
      tags:
        - audio
      produces:
        - application/json
      parameters:
        - in: formData
          name: extension
          type: boolean
          description: Includes the file extension in the returned name
          required: false
      responses:
        "200":
          description: Success
  /audio:
    get:
      description: Download audio by name.
      tags:
        - audio
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /bars/decklink:
    post:
      description: Takes a set of test Bars as an input and outputs it to a decklink card.
      tags:
        - bars
      parameters:
        - in: body
          type: object
          properties:
            input:
              type: object
              properties:
                type:
                  type: string
                  description: The type of color bars outputed
                  example: testsrc2
                  required: false
                freqeuncy:
                  type: number
                  description: The audio frequency of color bars outputed in hertz
                  example: 1000
                  required: false
            output:
              type: object
              properties:
                cardName:
                  type: string
                  description: The name of the BMD Decklink cards"
                  example: DeckLink SDI
                  required: true
                duplexMode:
                  type: string
                  description: Duplex mode of the BMD Decklink card"
                  example: full
                  required: false
                volume:
                  type: number
                  description: Volume output of the BMD Decklink card between 0 and 1"
                  example: 0.25
                  required: false
            overlay:
              type: object
              properties:
                font:
                  type: string
                  description: The name of the font file to use for text overlay. Must use the
                    TrueType fonts
                  example: swansea-bold.ttf
                  required: false
                timecode:
                  type: boolean
                  description: Show the timecode line
                  example: false
                  required: false
                offset:
                  type: number
                  description: Offset for time in hours. E.g 3, -3
                  example: 0
                  required: false
            thumbnail:
              type: object
              properties:
                frequency:
                  type: number
                  description: Frequency a thumbnail is prodicd in frames.
                  example: 25
                  required: false
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /file:
    post:
      description: Generate custom ident bars.
      tags:
        - bars
      produces:
        - application/json
      responses:
        "200":
          description: Success
    get:
      description: Download file by name.
      tags:
        - file
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /bars/srt:
    post:
      description: SRT encode test bars.
      tags:
        - bars
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /bars/rtmp:
    post:
      description: RTMP encode test bars.
      tags:
        - bars
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /bars/udp:
    post:
      description: UDP encode test bars.
      tags:
        - bars
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /bars/rtp:
    post:
      description: RTP encode test bars.
      tags:
        - bars
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /bars/hls:
    post:
      description: HLS encode test bars.
      tags:
        - bars
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /decklink/file:
    post:
      description: Takes Decklink input in SDI and encodes it as a file.
      tags:
        - decklink
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /decklink/srt:
    post:
      description: Takes Decklink input in SDI and encodes it as SRT.
      tags:
        - decklink
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /decklink/udp:
    post:
      description: Takes Decklink input in SDI and encodes it as UDP.
      tags:
        - decklink
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /decklink/rtp:
    post:
      description: Takes Decklink input in SDI and encodes it as RTP.
      tags:
        - decklink
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /decklink/rtmp:
    post:
      description: Takes Decklink input in SDI and encodes it as RTMP.
      tags:
        - decklink
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /decklink/hls:
    post:
      description: Takes Decklink input in SDI and encodes it as HLS.
      tags:
        - decklink
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /decklink:
    get:
      description: Gets the info about currently attached Decklink cards
      tags:
        - decklink
      produces:
        - application/json
      responses:
        "200":
          description: Success
    post:
      description: Sets the config for an individual Decklink card
      tags:
        - decklink
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /file/decklink:
    post:
      description: Takes a file as an input and outputs it to a decklink card.
      tags:
        - file
      parameters:
        - in: formData
          name: file
          type: string
          description: Filename and extension of media to playout. E.g - test.mp4
          required: true
        - in: formData
          name: cardName
          type: string
          description: The name of the BMD Decklink cards. E.g - "DeckLink SDI"
          required: true
        - in: formData
          name: font
          type: string
          description: The name of the font file to use for text overlay. Must use the
            TrueType fonts. E.g - "swansea-bold.ttf"
          required: font
        - in: formData
          name: offset
          type: number
          description: Offset for time in hours. E.g 3, -3
          required: false
        - in: formData
          name: timecode
          type: boolean
          description: Show the timecode line - true,false
          required: false
        - in: formData
          name: repeat
          type: boolean
          description: Decides whether the media loops or not
          required: false
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /file/srt:
    post:
      description: SRT encode a file.
      tags:
        - file
      parameters:
        - in: formData
          name: file
          type: string
          description: Filename and extension of media to playout. E.g - test.mp4.
            Relative to ./data/media/
          required: true
        - in: formData
          name: address
          type: string
          description: Address to direct stream towards
          required: true
        - in: formData
          name: port
          type: number
          description: Port to direct stream towards
          required: true
        - in: formData
          name: latency
          type: number
          description: SRT latency in milliseconds, default is 250ms
          required: false
        - in: formData
          name: bitrate
          type: number
          description: The bitrate of the encoded stream in kilobits per second
          required: true
        - in: formData
          name: font
          type: string
          description: The name of the font file to use for text overlay. Must use the
            TrueType fonts. E.g - "swansea-bold.ttf"
          required: false
        - in: formData
          name: offset
          type: number
          description: Offset for time in hours. E.g 3, -3
          required: false
        - in: formData
          name: timecode
          type: boolean
          description: Show the timecode line - true,false
          required: false
        - in: formData
          name: repeat
          type: boolean
          description: Decides whether the media loops or not
          required: false
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /file/udp:
    post:
      description: UDP encode a file.
      tags:
        - file
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /file/rtp:
    post:
      description: RTP encode a file.
      tags:
        - file
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /file/rtmp:
    post:
      description: RTMP encode a file.
      tags:
        - file
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /file/hls:
    post:
      description: HLS encode a file.
      tags:
        - file
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /file/metadata:
    get:
      description: Get the metadata in a media file.
      tags:
        - files
      produces:
        - application/json
      parameters:
        - in: formData
          name: file
          type: string
          description: The filename including extension in the `./data/media` directory
          required: false
      responses:
        "200":
          description: Success
  /file/list:
    get:
      description: Gets a list of files in the "./data/media" folder.
      tags:
        - file
      produces:
        - application/json
      parameters:
        - in: formData
          name: extension
          type: boolean
          description: Includes the file extension in the returned name
          required: false
      responses:
        "200":
          description: Success
  /hls:
    get:
      description: Servers the HLS manifest files.
      tags:
        - hls
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /clock:
    get:
      description: An HTML page with a live clock showing server time - suitable for
        latency measurements
      tags:
        - page
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /jobs:
    get:
      description: An HTML page showing a simple job manager
      tags:
        - page
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /chart:
    get:
      description: An HTML page showing VMAF test results as a chart
      tags:
        - page
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /playlist/:playlist:
    get:
      description: Get all the items in a playlist
      tags:
        - files
      produces:
        - application/json
      responses:
        "200":
          description: Success
    post:
      description: Set all the items in a playlist
      tags:
        - files
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /playlist/:playlist/add:
    post:
      description: Add a single file to the playlist.
      tags:
        - files
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /playlist/:playlist/remove:
    post:
      description: Add a single file to the playlist.
      tags:
        - files
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /rtp/file:
    post:
      description: Takes an RTP input and turns it into a file.
      tags:
        - rtp
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /rtp/decklink:
    post:
      description: Takes an RTP input and outputs it to a decklink card.
      tags:
        - rtp
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /srt/file:
    post:
      description: Takes an SRT input and turns it into a file.
      tags:
        - srt
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /srt/decklink:
    post:
      description: Takes an SRT input and outputs it to a decklink card.
      tags:
        - srt
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /system/hello:
    get:
      description: Test route, API greets you in response.
      tags:
        - system
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /system/time:
    post:
      description: Set NTP server and sync.
      tags:
        - system
      produces:
        - application/json
      responses:
        "200":
          description: Success
    get:
      description: Get server time.
      tags:
        - system
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /system/stas:
    get:
      description: Get system stats; CPU, memory, etc.
      tags:
        - system
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /system/job/kill/all:
    post:
      description: Kill all running jobs
      tags:
        - system
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /system/job/kill/:jobId:
    post:
      description: Kills a job by ID
      tags:
        - system
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /system/job/all:
    get:
      description: Gets all jobs that are running
      tags:
        - system
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /system/job/thumbnail/:jobId:
    get:
      description: Gets a thumnail for a job by it's Job ID
      tags:
        - system
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /system/job/:jobId:
    get:
      description: Gets a job by ID
      tags:
        - system
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /udp/decklink:
    post:
      description: Takes an UDP input and outputs it to a decklink card.
      tags:
        - udp
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /udp/file:
    post:
      description: Takes an UDP input and outputs it to a file.
      tags:
        - udp
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /vmaf/models:
    get:
      description: Returns a list of VMAF models.
      tags:
        - vmaf
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /vmaf/test:
    post:
      description: Run a VMAF test specifing a reference file and test file.
      tags:
        - vmaf
      produces:
        - application/json
      responses:
        "200":
          description: Success
  /vmaf/results/json:
    get:
      description: Get a VMAF results file as a JSON object.
      tags:
        - vmaf
      produces:
        - application/file
      responses:
        "200":
          description: Success
  /vmaf/results/csv:
    get:
      description: Get a VMAF results file as a CSV object.
      tags:
        - vmaf
      produces:
        - application/file
      responses:
        "200":
          description: Success
  /vmaf/results/download/csv:
    get:
      description: Get a VMAF results file as a CSV file.
      tags:
        - vmaf
      produces:
        - application/file
      responses:
        "200":
          description: Success
  /vmaf/results/download/json:
    get:
      description: Get a VMAF results file in a downloadable JSON file.
      tags:
        - vmaf
      produces:
        - application/file
      responses:
        "200":
          description: Success
components: {}
tags: []
